/*
 * Talknow API
 * This is a prototype of Talknow Project's front/back API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.OkHttpClient;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.UpdateInfoDTO;
import org.openapitools.client.model.UserDTO;
import org.openapitools.client.model.UserInfoDTO;
import org.openapitools.client.model.UserInscriptionDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for SettingsApi
 */

public class SettingsApiTest {

    private final SettingsApi settingsApi = new SettingsApi();
    private final AuthenticationApi authenticationApi = new AuthenticationApi();
    @Autowired
    private PasswordEncoder passwordEncoder;

    @BeforeEach
    public void init() throws ApiException {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
        ApiClient apiClient = new ApiClient(okHttpClient);
        authenticationApi.setApiClient(apiClient);
        settingsApi.setApiClient(apiClient);
        passwordEncoder = new BCryptPasswordEncoder();
    }

    /**
     * Obtenir les informations de l&#39;utilisateur.
     * <p>
     * dans la page des paramètres, on a besoin de récupérer les données d&#39;inscription de l&#39;utilisateur afin qu&#39;il puisse les voir et les modifier si il le souhaite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profileSettingsGetTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("nuno.esperito").password("password").firstname("nuno").secondname("esperito").address("nuno.esperito@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        try {
            settingsApi.profileSettingsGet();
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        authenticationApi.userSigninPost(new UserDTO().login("nuno.esperito").password("password"));
        UserInfoDTO response = settingsApi.profileSettingsGet();
        assertNotNull(response);
        assertEquals("nuno.esperito", response.getLogin());
        assertEquals("nuno.esperito@talknow", response.getAdress());
        assertEquals("nuno", response.getFirstName());
        assertEquals("esperito", response.getSecondName());
        assertEquals("assets/avatar1.png", response.getAvatar());
        settingsApi.userLoginDelete("nuno.esperito");

    }

    /**
     * Modifier les informations de l&#39;utilisateur.
     * <p>
     * L&#39;utilisateur peut modifier certaines informations à propos de son compte si il le souhaite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profileSettingsPutTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("antonio.conte").password("password").firstname("antonio").secondname("conte").address("antonio.conte@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        try {
            settingsApi.profileSettingsGet();
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        UpdateInfoDTO updateAvatar = new UpdateInfoDTO().type("avatar").value("assets/avatar2.png");
        UpdateInfoDTO updateFirstname = new UpdateInfoDTO().type("firstname").value("simon");
        UpdateInfoDTO updateLastname = new UpdateInfoDTO().type("lastname").value("dormier");
        UpdateInfoDTO updatePassword = new UpdateInfoDTO().type("password").value("azerty123");
        authenticationApi.userSigninPost(new UserDTO().login("antonio.conte").password("password"));
        String responseAvatar = settingsApi.profileSettingsPut(updateAvatar);
        assertEquals("avatar mis à jour avec succès", responseAvatar);
        String responseFirstname = settingsApi.profileSettingsPut(updateFirstname);
        assertEquals("firstname mis à jour avec succès", responseFirstname);
        String responseLastname = settingsApi.profileSettingsPut(updateLastname);
        assertEquals("lastname mis à jour avec succès", responseLastname);
        String responsePassword = settingsApi.profileSettingsPut(updatePassword);
        assertEquals("password mis à jour avec succès", responsePassword);
        UserInfoDTO response = settingsApi.profileSettingsGet();
        assertEquals("simon", response.getFirstName());
        assertEquals("dormier", response.getSecondName());
        assertEquals("assets/avatar2.png", response.getAvatar());
        assertNotEquals(passwordEncoder.encode("password"), passwordEncoder.encode("azerty123"));
        settingsApi.userLoginDelete("antonio.conte");

    }

}

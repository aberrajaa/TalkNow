/*
 * Talknow API
 * This is a prototype of Talknow Project's front/back API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.OkHttpClient;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.model.*;

import java.time.OffsetDateTime;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * API tests for AuthenticationApi
 */
public class AuthenticationApiTest {

    private final ContactApi contactApi = new ContactApi();
    private final AuthenticationApi authenticationApi = new AuthenticationApi();

    private final HomeApi homeApi = new HomeApi();
    private final SettingsApi settingsApi = new SettingsApi();

    @BeforeEach
    public void init() throws ApiException {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
        ApiClient apiClient = new ApiClient(okHttpClient);
        authenticationApi.setApiClient(apiClient);
        settingsApi.setApiClient(apiClient);
        homeApi.setApiClient(apiClient);
        contactApi.setApiClient(apiClient);
    }

    /**
     * Permet à un utilisateur déjà inscrit de se connecter.
     * <p>
     * L&#39;utilisateur effectue une requête de type POST afin de fournir son login et mot de passe, côté serveur on vérifie si le login et de mot de passe reçu est présent dans la base de données.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userSigninPostTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("hakima.benchrifa").password("password").firstname("hakima").secondname("benchrifa").address("hakima.benchrifa@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        UserDTO userDTO = new UserDTO().login("hakima.benchrifa").password("invalid");
        UserDTO userNotSignedUp = new UserDTO().login("hakima.ben").password("test");
        try {
            authenticationApi.userSigninPost(userDTO);
            Assertions.fail();
        } catch (ApiException e) {
            assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());
        }

        try {
            authenticationApi.userSigninPost(userNotSignedUp);
            Assertions.fail();
        } catch (ApiException e) {
            assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());
        }

        authenticationApi.userSigninPost(userDTO.password("password"));

        try {
            authenticationApi.userSigninPost(userDTO);
            Assertions.fail();
        } catch (ApiException e) {
            assertEquals(HttpStatus.SC_CONFLICT, e.getCode());
        }
        settingsApi.userLoginDelete("hakima.benchrifa");
    }

    /**
     * Permet à l&#39;utilisateur de se déconnecter.
     * <p>
     * L&#39;utilisateur n&#39;a pas besoin d&#39;envoyer de contenu dans le requête POST, mais cette route lui permet ainsi de se déconnecter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userSignoutPostTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("hamid.benchrifa").password("password").firstname("hamid").secondname("benchrifa").address("hamid.benchrifa@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        UserDTO userDTO = new UserDTO().login("hamid.benchrifa").password("password");
        UserDTO userNotSignedUp = new UserDTO().login("hamid.ben").password("test");
        String response = authenticationApi.userSigninPost(userDTO);
        assertEquals("{" + "\"message\":" + "\"Connection Acceptedhamid.benchrifa\"}", response);
        authenticationApi.userSignoutPost();
        try {
            settingsApi.profileSettingsGet();
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        settingsApi.userLoginDelete("hamid.benchrifa");

    }

    /**
     * Permet à l&#39;utilisateur de s&#39;inscrire à l&#39;application.
     * <p>
     * L&#39;utilisateur effectue une requête de type POST afin de fournir sous format JSON les informations suivantes, login, password, first name, second name, birthday date.
     *
     * @throws ApiException if the Api call fails
     */

    @Test
    public void userSignupPostTest() throws ApiException {
        String dateString = "2023-11-02T10:15:30+02:00";
        OffsetDateTime date = OffsetDateTime.parse(dateString);
        UserInscriptionDTO userInscriptionDTO = new UserInscriptionDTO().firstname("mhamed").secondname("sefrioui").login("mhamed.sefrioui").address("mhamed.sefrioui@talknow").date(date).password("password");
        UserInscriptionDTO userInscriptionDTOfaux = new UserInscriptionDTO().firstname("mhamed23").secondname("sefrioui").login("mhamed23.sefrioui").address("mhamed23.sefrioui@talknow").date(date).password("password");
        UserInscriptionDTO userInscriptionDTOfaux2 = new UserInscriptionDTO().firstname("mhamed").secondname("sefrioui12").login("mhamed.sefrioui12").address("mhamed.sefrioui12@talknow").date(date).password("password");
        UserInscriptionDTO userInscriptionDTOfaux3 = new UserInscriptionDTO().firstname("mhamed").secondname("sefrioui").login("mhamed.sefrioui").address("mhamed.sefrioui@talknow").date(date).password("pas");
        try {
            authenticationApi.userSignupPostWithHttpInfo(userInscriptionDTOfaux);
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());//les informations ne sont pas bonnes : le prénom ne doit contenir que des lettres
        }
        try {
            authenticationApi.userSignupPostWithHttpInfo(userInscriptionDTOfaux2);//les informations ne sont pas bonnes : ne doit contenir que des lettres
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());
        }
        try {
            authenticationApi.userSignupPostWithHttpInfo(userInscriptionDTOfaux3);
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());//les informations ne sont pas bonnes : le mdp doit contenir au moins 4 caractères
        }
        try {
            ApiResponse<Void> response = authenticationApi.userSignupPostWithHttpInfo(userInscriptionDTO);
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_CONFLICT, e.getCode());
        }
        UserDTO userDTO = new UserDTO().login("mhamed.sefrioui").password("password");
        try {
            settingsApi.profileSettingsGet();
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        String response = authenticationApi.userSigninPost(userDTO);
        assertEquals("{" + "\"message\":" + "\"Connection Acceptedmhamed.sefrioui\"}", response);
        UserInfoDTO userinfos = settingsApi.profileSettingsGet();
        assertEquals(userinfos.getFirstName(), "mhamed");
        assertEquals(userinfos.getSecondName(), "sefrioui");
        assertEquals(userinfos.getAdress(), "mhamed.sefrioui@talknow");
        assertEquals(userinfos.getLogin(), "mhamed.sefrioui");
        List<ContactInfoDTO> listofcontact = contactApi.profileContactGet();
        List<ConversationDTO> listofconversation = homeApi.profileConversationsGet();
        UserHomeInfoDTO userAccueil = homeApi.profileAccueilGet();
        assertTrue(listofconversation.isEmpty());
        assertTrue(listofcontact.isEmpty());
        assertEquals(userAccueil.getFirstname(), userinfos.getFirstName());
        assertEquals(userAccueil.getAvatar(), userinfos.getAvatar());
        settingsApi.userLoginDelete("mhamed.sefrioui");
    }
}

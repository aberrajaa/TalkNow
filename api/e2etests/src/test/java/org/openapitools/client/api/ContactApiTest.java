/*
 * Talknow API
 * This is a prototype of Talknow Project's front/back API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.OkHttpClient;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.*;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for ContactApi
 */
public class ContactApiTest {

    private final ContactApi contactApi = new ContactApi();
    private final AuthenticationApi authenticationApi = new AuthenticationApi();
    private final HomeApi homeApi = new HomeApi();
    private final SettingsApi settingsApi = new SettingsApi();
    private UserDTO user;
    private UserInscriptionDTO userInscriptionDTO;

    @BeforeEach
    public void init() throws ApiException {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
        ApiClient apiClient = new ApiClient(okHttpClient);
        authenticationApi.setApiClient(apiClient);
        contactApi.setApiClient(apiClient);
        homeApi.setApiClient(apiClient);
        settingsApi.setApiClient(apiClient);
    }

    /**
     * Permet à l&#39;utilisateur de supprimer un de ses contacts.
     * <p>
     * Si l&#39;utilisateur ne souhaite plus avoir un contact donné, il dispose d&#39;une option pour le supprimer de sa base de données.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profileContactContactidDeleteTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("jose.mourinho").password("password").firstname("jose").secondname("mourinho").address("jose.mourinho@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        AjoutContactDTO ajoutContactDTO = new AjoutContactDTO().email("etienne.allain@talknow");
        try {
            contactApi.profileContactPost(ajoutContactDTO);
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        authenticationApi.userSigninPost(new UserDTO().login("jose.mourinho").password("password"));

        ArrayList<ContactInfoDTO> response = (ArrayList<ContactInfoDTO>) contactApi.profileContactPost(ajoutContactDTO);
        assertNotNull(response);
        assertFalse(response.isEmpty());
        ContactInfoDTO addedContact = null;
        for (ContactInfoDTO contact : response) {
            if (contact.getPseudo().equals("etienne.allain")) {
                addedContact = contact;
            }
        }
        assertEquals("etienne", addedContact.getFirstname());
        assertEquals("allain", addedContact.getLastname());
        assertEquals("etienne.allain@talknow", addedContact.getEmail());
        assertEquals("etienne.allain", addedContact.getPseudo());
        assertEquals("assets/avatar1.png", addedContact.getAvatar());
        boolean test = true;
        List<ContactInfoDTO> deletedContactList = contactApi.profileContactContactidDelete(addedContact.getId());
        for (ContactInfoDTO conversation : deletedContactList) {
            if (conversation.getPseudo().equals(addedContact.getPseudo())) {
                test = false;
                break;
            }
        }
        assertTrue(test);
        settingsApi.userLoginDelete("jose.mourinho");

    }


    /**
     * Permet à l&#39;utilisateur de créer une conversation avec un contact.
     * <p>
     * Si l&#39;utilisateur souhaite discuter avec un utilisateur pour la première fois, en appuyant sur le bouton une conversation se crée au niveau du home.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profileContactContactidPostTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("pep.guardiola").password("password").firstname("pep").secondname("guardiola").address("pep.guardiola@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        AjoutContactDTO ajoutContactDTO = new AjoutContactDTO().email("etienne.allain@talknow");
        try {
            contactApi.profileContactPost(ajoutContactDTO);
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }

        try {
            homeApi.profileConversationsGet();
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        authenticationApi.userSigninPost(new UserDTO().login("pep.guardiola").password("password"));
        ArrayList<ContactInfoDTO> response = (ArrayList<ContactInfoDTO>) contactApi.profileContactPost(ajoutContactDTO);
        assertNotNull(response);
        assertFalse(response.isEmpty());
        ContactInfoDTO addedContact = response.get(0);
        contactApi.profileContactContactidPost(addedContact.getId());
        List<ConversationDTO> listConversations = homeApi.profileConversationsGet();
        ConversationDTO conversationAdded = null;
        for (ConversationDTO conversation : listConversations) {
            if (conversation.getContactPseudo().equals(addedContact.getPseudo())) {
                conversationAdded = conversation;
            }
        }
        assertEquals(conversationAdded.getContactPseudo(), addedContact.getPseudo());
        assertTrue(conversationAdded.getMyMessages().isEmpty());
        assertEquals(conversationAdded.getLastMessage(), "");
        assertNull(conversationAdded.getLastMessageDate());

        List<ConversationDTO> initialConversations = homeApi.profileConversationsGet();
        int initialSize = initialConversations.size();

        contactApi.profileContactContactidPost(addedContact.getId());

        List<ConversationDTO> finalConversations = homeApi.profileConversationsGet();
        int finalSize = finalConversations.size();

        assertEquals(initialSize, finalSize);

        settingsApi.userLoginDelete("pep.guardiola");

    }

    /**
     * Permet à l&#39;utilisateur de modifier des informations sur le contact souhaité.
     * <p>
     * Si l&#39;utilisateur souhaite renommé un de ses contacts, il peut effectué ceci, ainsi que modifier l&#39;avatar du contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profileContactContactidPutTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("carlo.ancelotti").password("password").firstname("carlo").secondname("ancelotti").address("carlo.ancelotti@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        AjoutContactDTO ajoutContactDTO = new AjoutContactDTO().email("mike.tyson@talknow");

        try {
            contactApi.profileContactPost(ajoutContactDTO);
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        authenticationApi.userSigninPost(new UserDTO().login("carlo.ancelotti").password("password"));
        ArrayList<ContactInfoDTO> response = (ArrayList<ContactInfoDTO>) contactApi.profileContactPost(ajoutContactDTO);
        UpdateInfoDTO updateAvatar = new UpdateInfoDTO().type("avatar").value("assets/avatar2.png");
        UpdateInfoDTO updateFirstname = new UpdateInfoDTO().type("firstname").value("aymen");
        UpdateInfoDTO updateLastname = new UpdateInfoDTO().type("lastname").value("berrajaa");
        ContactInfoDTO contactAdded = null;

        for (ContactInfoDTO contact : response) {
            if (contact.getPseudo().equals("mike.tyson")) {
                contactAdded = contact;
            }
        }
        contactApi.profileContactContactidPut(contactAdded.getId(), updateAvatar);
        contactApi.profileContactContactidPut(contactAdded.getId(), updateFirstname);
        contactApi.profileContactContactidPut(contactAdded.getId(), updateLastname);
        ArrayList<ContactInfoDTO> response2 = (ArrayList<ContactInfoDTO>) contactApi.profileContactGet();

        ContactInfoDTO contactModified = null;

        for (ContactInfoDTO contact : response2) {
            if (contact.getPseudo().equals("mike.tyson")) {
                contactModified = contact;
            }
        }
        settingsApi.userLoginDelete("carlo.ancelotti");

    }

    /**
     * Obtenir la liste de tous ses contacts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profileContactGetTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("jurgen.klopp").password("password").firstname("jurgen").secondname("klopp").address("jurgen.klopp@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        try {
            contactApi.profileContactGet();
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        authenticationApi.userSigninPost(new UserDTO().login("jurgen.klopp").password("password"));
        List<ContactInfoDTO> response = contactApi.profileContactGet();
        AjoutContactDTO ajoutContactDTO = new AjoutContactDTO().email("vincent.barat@talknow");
        ArrayList<ContactInfoDTO> listOfContact = (ArrayList<ContactInfoDTO>) contactApi.profileContactPost(ajoutContactDTO);
        assertFalse(listOfContact.isEmpty());
        ContactInfoDTO contactadded = new ContactInfoDTO();
        for (ContactInfoDTO contact : listOfContact) {
            if (contact.getPseudo().equals("vincent.barat")) {
                contactadded.setId(contact.getId());
                contactadded.setAvatar(contact.getAvatar());
                contactadded.setEmail(contact.getEmail());
                contactadded.setFirstname(contact.getFirstname());
                contactadded.setLastname(contact.getLastname());
                contactadded.setPseudo(contact.getPseudo());
            }
        }
        assertNotNull(contactadded);
        assertEquals("vincent", contactadded.getFirstname());
        assertEquals("barat", contactadded.getLastname());
        assertEquals(ajoutContactDTO.getEmail(), contactadded.getEmail());
        settingsApi.userLoginDelete("jurgen.klopp");

    }

    /**
     * Permet à l&#39;utilisateur d&#39;ajouter un contact.
     * <p>
     * Si l&#39;utilisateur souhaite discuter avec un contact qui n&#39;existe pas encore dans sa base de données, il peut l&#39;ajouter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profileContactPostTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("rafa.benitez").password("password").firstname("rafa").secondname("benitez").address("rafa.benitez@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        AjoutContactDTO ajoutContactDTO = new AjoutContactDTO().email("quentin.perez@talknow");
        try {
            contactApi.profileContactPost(ajoutContactDTO);
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        authenticationApi.userSigninPost(new UserDTO().login("rafa.benitez").password("password"));
        ArrayList<ContactInfoDTO> response = (ArrayList<ContactInfoDTO>) contactApi.profileContactPost(ajoutContactDTO);
        assertNotNull(response);
        assertFalse(response.isEmpty());
        ContactInfoDTO addedContact = null;
        for (ContactInfoDTO contact : response) {
            if (contact.getPseudo().equals("quentin.perez")) {
                addedContact = contact;
            }
        }
        assertEquals("quentin", addedContact.getFirstname());
        assertEquals("perez", addedContact.getLastname());
        assertEquals("quentin.perez@talknow", addedContact.getEmail());
        assertEquals("quentin.perez", addedContact.getPseudo());
        assertEquals("assets/avatar1.png", addedContact.getAvatar());

        List<ContactInfoDTO> initialContacts = contactApi.profileContactGet();
        int initialSize = initialContacts.size();

        contactApi.profileContactPost(ajoutContactDTO);

        List<ContactInfoDTO> finalContacts = contactApi.profileContactGet();
        int finalSize = finalContacts.size();

        assertEquals(initialSize, finalSize);

        AjoutContactDTO emailFormatIncorrect = new AjoutContactDTO().email("emailincorrect");
        try {
            contactApi.profileContactPost(emailFormatIncorrect);
            Assertions.fail();
        } catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());
        }

        AjoutContactDTO emailDifferentDomain = new AjoutContactDTO().email("john.doe@autredomaine");
        List<ContactInfoDTO> avant = contactApi.profileContactGet();
        int taille_avant = avant.size();
        contactApi.profileContactPost(emailDifferentDomain);
        List<ContactInfoDTO> apres = contactApi.profileContactGet();
        int taille_apres = apres.size();
        assertEquals(taille_avant + 1, taille_apres);

        AjoutContactDTO emailDifferentUserFormat = new AjoutContactDTO().email("pseudo@domaine");
        contactApi.profileContactPost(emailDifferentUserFormat);
        List<ContactInfoDTO> fin = contactApi.profileContactGet();
        int taille_fin = fin.size();
        assertEquals(taille_apres + 1, taille_fin);
        settingsApi.userLoginDelete("rafa.benitez");
    }
}

/*
 * Talknow API
 * This is a prototype of Talknow Project's front/back API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.OkHttpClient;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.*;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for HomeApi
 */
public class HomeApiTest {

    private final HomeApi homeApi = new HomeApi();
    private final AuthenticationApi authenticationApi = new AuthenticationApi();
    private final ContactApi contactApi = new ContactApi();
    private final SettingsApi settingsApi = new SettingsApi();

    private final MessageApi messageApi = new MessageApi();

    @BeforeEach
    public void init() throws ApiException {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
        ApiClient apiClient = new ApiClient(okHttpClient);
        authenticationApi.setApiClient(apiClient);
        contactApi.setApiClient(apiClient);
        homeApi.setApiClient(apiClient);
        settingsApi.setApiClient(apiClient);
        messageApi.setApiClient(apiClient);
    }

    /**
     * Permet de récupérer le prénom et l&#39;avatar de l&#39;utilisateur connecté.
     *
     * @throws ApiException if the Api call fails
     */

    @Test
    public void profileAccueilGetTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("xabi.alonso").password("password").firstname("xabi").secondname("alonso").address("xabi.alonso@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        try {
            homeApi.profileAccueilGet();
            Assertions.fail();
        } catch (ApiException e) {
            assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        authenticationApi.userSigninPost(new UserDTO().login("xabi.alonso").password("password"));
        UserHomeInfoDTO response = homeApi.profileAccueilGet();
        UserInfoDTO parametresUser = settingsApi.profileSettingsGet();
        assertEquals(response.getAvatar(), parametresUser.getAvatar());
        assertEquals(response.getFirstname(), parametresUser.getFirstName());
        settingsApi.userLoginDelete("xabi.alonso");

    }


    /**
     * Permet à l&#39;utilisateur de supprimer une conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profileConversationsConversationidDeleteTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("walid.regragui").password("password").firstname("walid").secondname("regragui").address("walid.regragui@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        try {
            homeApi.profileConversationsGet();
            Assertions.fail();
        } catch (ApiException e) {
            assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        authenticationApi.userSigninPost(new UserDTO().login("walid.regragui").password("password"));
        List<ContactInfoDTO> listofcontact = contactApi.profileContactPost(new AjoutContactDTO().email("vincent.barat@talknow"));
        ContactInfoDTO contactToCreateConversationWith = null;
        for (ContactInfoDTO contact : listofcontact) {
            if (contact.getPseudo().equals("vincent.barat")) {
                contactToCreateConversationWith = contact;
            }
        }
        contactApi.profileContactContactidPost(contactToCreateConversationWith.getId());
        List<ConversationDTO> response = homeApi.profileConversationsGet();
        ConversationDTO conversationToDelete = null;
        for (ConversationDTO conversation : response) {
            if (conversation.getContactPseudo().equals(contactToCreateConversationWith.getPseudo())) {
                conversationToDelete = conversation;
            }
        }
        Long conversationid = conversationToDelete.getId();
        homeApi.profileConversationsConversationidDelete(conversationid);
        List<ConversationDTO> listMiseAJour = homeApi.profileConversationsGet();
        boolean testExistenceConversation = false;
        boolean testExistenceContact = false;//le contact ne doit pas etre supprimé de la liste de contact
        for (ConversationDTO conversationMAJ : listMiseAJour) {
            if (conversationMAJ.getId() == conversationToDelete.getId()) {
                testExistenceConversation = true;
                break;
            }
        }
        assertFalse(testExistenceConversation);//si cette assertion est fausse alors la conversation a bien été supprimé
        List<ContactInfoDTO> listOfContactMAJ = contactApi.profileContactGet();
        for (ContactInfoDTO contactMAJ : listOfContactMAJ) {
            if (contactMAJ.getPseudo().equals("vincent.barat")) {
                testExistenceContact = true;
                break;
            }
        }
        assertTrue(testExistenceContact);//si cette assertion est vrai alors le contact n'a pas été supprimé = resultat attendu
        settingsApi.userLoginDelete("walid.regragui");

    }

    /**
     * Obtenir la liste des conversations.
     * <p>
     * Permet à l&#39;utilisateur de récupérer toutes ses conversations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profileConversationsGetTest() throws ApiException {
        UserInscriptionDTO inscription = new UserInscriptionDTO().login("zinedine.zidane").password("password").firstname("zinedine").secondname("zidane").address("zinedine.zidane@talknow").date(null);
        authenticationApi.userSignupPostWithHttpInfo(inscription);
        try {
            homeApi.profileConversationsGet();
            Assertions.fail();
        } catch (ApiException e) {
            assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
        authenticationApi.userSigninPost(new UserDTO().login("zinedine.zidane").password("password"));
        contactApi.profileContactPost(new AjoutContactDTO().email("vincent.barat@talknow"));//ajout d'un contact pour créer une conversation avec
        List<ContactInfoDTO> listofcontacts = contactApi.profileContactPost(new AjoutContactDTO().email("quentin.perez@talknow"));//ajout d'un contact pour créer une conversation avec
        Long idVincent = null;
        Long idQuentin = null;
        for (ContactInfoDTO contact : listofcontacts) {
            if (contact.getPseudo().equals("vincent.barat")) {
                idVincent = contact.getId();
            }
            if (contact.getPseudo().equals("quentin.perez")) {
                idQuentin = contact.getId();
            }
        }
        contactApi.profileContactContactidPost(idVincent);
        contactApi.profileContactContactidPost(idQuentin);
        List<ConversationDTO> response = homeApi.profileConversationsGet();
        boolean conversationWithVincentExist = false;
        boolean conversationWithQuentinExist = false;
        ConversationDTO conversationWithVincent = null;
        for (ConversationDTO conversation : response) {
            if (conversation.getContactPseudo().equals("vincent.barat")) {
                conversationWithVincentExist = true;
                conversationWithVincent = conversation;
            }
            if (conversation.getContactPseudo().equals("quentin.perez")) {
                conversationWithQuentinExist = true;
            }
        }
        assertTrue(conversationWithQuentinExist);
        assertTrue(conversationWithVincentExist);
        assertEquals(conversationWithVincent.getContactPseudo(), "vincent.barat");
        assertNull(conversationWithVincent.getLastMessageDate());
        assertEquals(conversationWithVincent.getLastMessage(), "");
        assertTrue(conversationWithVincent.getMyMessages().isEmpty());
        settingsApi.userLoginDelete("zinedine.zidane");

    }
}

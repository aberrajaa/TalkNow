/*
 * Talknow API
 * This is a prototype of Talknow Project's front/back API. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MessageDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConversationDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_CONTACT_PSEUDO = "contactPseudo";
  @SerializedName(SERIALIZED_NAME_CONTACT_PSEUDO)
  private String contactPseudo;

  public static final String SERIALIZED_NAME_CONTACT_AVATAR = "contactAvatar";
  @SerializedName(SERIALIZED_NAME_CONTACT_AVATAR)
  private String contactAvatar;

  public static final String SERIALIZED_NAME_LAST_MESSAGE = "lastMessage";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE)
  private String lastMessage;

  public static final String SERIALIZED_NAME_LAST_MESSAGE_DATE = "lastMessageDate";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE_DATE)
  private OffsetDateTime lastMessageDate;

  public static final String SERIALIZED_NAME_MY_MESSAGES = "myMessages";
  @SerializedName(SERIALIZED_NAME_MY_MESSAGES)
  private List<MessageDTO> myMessages;

  public ConversationDTO() {
  }

  public ConversationDTO id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ConversationDTO contactPseudo(String contactPseudo) {
    
    this.contactPseudo = contactPseudo;
    return this;
  }

   /**
   * Get contactPseudo
   * @return contactPseudo
  **/
  @javax.annotation.Nullable
  public String getContactPseudo() {
    return contactPseudo;
  }


  public void setContactPseudo(String contactPseudo) {
    this.contactPseudo = contactPseudo;
  }


  public ConversationDTO contactAvatar(String contactAvatar) {
    
    this.contactAvatar = contactAvatar;
    return this;
  }

   /**
   * Get contactAvatar
   * @return contactAvatar
  **/
  @javax.annotation.Nullable
  public String getContactAvatar() {
    return contactAvatar;
  }


  public void setContactAvatar(String contactAvatar) {
    this.contactAvatar = contactAvatar;
  }


  public ConversationDTO lastMessage(String lastMessage) {
    
    this.lastMessage = lastMessage;
    return this;
  }

   /**
   * Get lastMessage
   * @return lastMessage
  **/
  @javax.annotation.Nullable
  public String getLastMessage() {
    return lastMessage;
  }


  public void setLastMessage(String lastMessage) {
    this.lastMessage = lastMessage;
  }


  public ConversationDTO lastMessageDate(OffsetDateTime lastMessageDate) {
    
    this.lastMessageDate = lastMessageDate;
    return this;
  }

   /**
   * Get lastMessageDate
   * @return lastMessageDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastMessageDate() {
    return lastMessageDate;
  }


  public void setLastMessageDate(OffsetDateTime lastMessageDate) {
    this.lastMessageDate = lastMessageDate;
  }


  public ConversationDTO myMessages(List<MessageDTO> myMessages) {
    
    this.myMessages = myMessages;
    return this;
  }

  public ConversationDTO addMyMessagesItem(MessageDTO myMessagesItem) {
    if (this.myMessages == null) {
      this.myMessages = new ArrayList<>();
    }
    this.myMessages.add(myMessagesItem);
    return this;
  }

   /**
   * Get myMessages
   * @return myMessages
  **/
  @javax.annotation.Nullable
  public List<MessageDTO> getMyMessages() {
    return myMessages;
  }


  public void setMyMessages(List<MessageDTO> myMessages) {
    this.myMessages = myMessages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationDTO conversationDTO = (ConversationDTO) o;
    return Objects.equals(this.id, conversationDTO.id) &&
        Objects.equals(this.contactPseudo, conversationDTO.contactPseudo) &&
        Objects.equals(this.contactAvatar, conversationDTO.contactAvatar) &&
        Objects.equals(this.lastMessage, conversationDTO.lastMessage) &&
        Objects.equals(this.lastMessageDate, conversationDTO.lastMessageDate) &&
        Objects.equals(this.myMessages, conversationDTO.myMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, contactPseudo, contactAvatar, lastMessage, lastMessageDate, myMessages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    contactPseudo: ").append(toIndentedString(contactPseudo)).append("\n");
    sb.append("    contactAvatar: ").append(toIndentedString(contactAvatar)).append("\n");
    sb.append("    lastMessage: ").append(toIndentedString(lastMessage)).append("\n");
    sb.append("    lastMessageDate: ").append(toIndentedString(lastMessageDate)).append("\n");
    sb.append("    myMessages: ").append(toIndentedString(myMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("contactPseudo");
    openapiFields.add("contactAvatar");
    openapiFields.add("lastMessage");
    openapiFields.add("lastMessageDate");
    openapiFields.add("myMessages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConversationDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationDTO is not found in the empty JSON string", ConversationDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contactPseudo") != null && !jsonObj.get("contactPseudo").isJsonNull()) && !jsonObj.get("contactPseudo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactPseudo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactPseudo").toString()));
      }
      if ((jsonObj.get("contactAvatar") != null && !jsonObj.get("contactAvatar").isJsonNull()) && !jsonObj.get("contactAvatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactAvatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactAvatar").toString()));
      }
      if ((jsonObj.get("lastMessage") != null && !jsonObj.get("lastMessage").isJsonNull()) && !jsonObj.get("lastMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastMessage").toString()));
      }
      if (jsonObj.get("myMessages") != null && !jsonObj.get("myMessages").isJsonNull()) {
        JsonArray jsonArraymyMessages = jsonObj.getAsJsonArray("myMessages");
        if (jsonArraymyMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("myMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `myMessages` to be an array in the JSON string but got `%s`", jsonObj.get("myMessages").toString()));
          }

          // validate the optional field `myMessages` (array)
          for (int i = 0; i < jsonArraymyMessages.size(); i++) {
            MessageDTO.validateJsonElement(jsonArraymyMessages.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationDTO>() {
           @Override
           public void write(JsonWriter out, ConversationDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationDTO
  * @throws IOException if the JSON string is invalid with respect to ConversationDTO
  */
  public static ConversationDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationDTO.class);
  }

 /**
  * Convert an instance of ConversationDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


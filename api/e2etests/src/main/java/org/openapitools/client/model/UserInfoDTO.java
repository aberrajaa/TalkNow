/*
 * Talknow API
 * This is a prototype of Talknow Project's front/back API. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserInfoDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UserInfoDTO {
  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_SECOND_NAME = "secondName";
  @SerializedName(SERIALIZED_NAME_SECOND_NAME)
  private String secondName;

  public static final String SERIALIZED_NAME_ADRESS = "adress";
  @SerializedName(SERIALIZED_NAME_ADRESS)
  private String adress;

  public static final String SERIALIZED_NAME_BIRTHDAY_DATE = "birthdayDate";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY_DATE)
  private OffsetDateTime birthdayDate;

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public UserInfoDTO() {
  }

  public UserInfoDTO login(String login) {
    
    this.login = login;
    return this;
  }

   /**
   * Get login
   * @return login
  **/
  @javax.annotation.Nullable
  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    this.login = login;
  }


  public UserInfoDTO password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public UserInfoDTO firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UserInfoDTO secondName(String secondName) {
    
    this.secondName = secondName;
    return this;
  }

   /**
   * Get secondName
   * @return secondName
  **/
  @javax.annotation.Nullable
  public String getSecondName() {
    return secondName;
  }


  public void setSecondName(String secondName) {
    this.secondName = secondName;
  }


  public UserInfoDTO adress(String adress) {
    
    this.adress = adress;
    return this;
  }

   /**
   * Get adress
   * @return adress
  **/
  @javax.annotation.Nullable
  public String getAdress() {
    return adress;
  }


  public void setAdress(String adress) {
    this.adress = adress;
  }


  public UserInfoDTO birthdayDate(OffsetDateTime birthdayDate) {
    
    this.birthdayDate = birthdayDate;
    return this;
  }

   /**
   * Get birthdayDate
   * @return birthdayDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getBirthdayDate() {
    return birthdayDate;
  }


  public void setBirthdayDate(OffsetDateTime birthdayDate) {
    this.birthdayDate = birthdayDate;
  }


  public UserInfoDTO avatar(String avatar) {
    
    this.avatar = avatar;
    return this;
  }

   /**
   * Get avatar
   * @return avatar
  **/
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }


  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserInfoDTO userInfoDTO = (UserInfoDTO) o;
    return Objects.equals(this.login, userInfoDTO.login) &&
        Objects.equals(this.password, userInfoDTO.password) &&
        Objects.equals(this.firstName, userInfoDTO.firstName) &&
        Objects.equals(this.secondName, userInfoDTO.secondName) &&
        Objects.equals(this.adress, userInfoDTO.adress) &&
        Objects.equals(this.birthdayDate, userInfoDTO.birthdayDate) &&
        Objects.equals(this.avatar, userInfoDTO.avatar);
  }

  @Override
  public int hashCode() {
    return Objects.hash(login, password, firstName, secondName, adress, birthdayDate, avatar);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserInfoDTO {\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    secondName: ").append(toIndentedString(secondName)).append("\n");
    sb.append("    adress: ").append(toIndentedString(adress)).append("\n");
    sb.append("    birthdayDate: ").append(toIndentedString(birthdayDate)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("login");
    openapiFields.add("password");
    openapiFields.add("firstName");
    openapiFields.add("secondName");
    openapiFields.add("adress");
    openapiFields.add("birthdayDate");
    openapiFields.add("avatar");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UserInfoDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserInfoDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserInfoDTO is not found in the empty JSON string", UserInfoDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserInfoDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserInfoDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("secondName") != null && !jsonObj.get("secondName").isJsonNull()) && !jsonObj.get("secondName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondName").toString()));
      }
      if ((jsonObj.get("adress") != null && !jsonObj.get("adress").isJsonNull()) && !jsonObj.get("adress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adress").toString()));
      }
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserInfoDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserInfoDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserInfoDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserInfoDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UserInfoDTO>() {
           @Override
           public void write(JsonWriter out, UserInfoDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserInfoDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserInfoDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserInfoDTO
  * @throws IOException if the JSON string is invalid with respect to UserInfoDTO
  */
  public static UserInfoDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserInfoDTO.class);
  }

 /**
  * Convert an instance of UserInfoDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

